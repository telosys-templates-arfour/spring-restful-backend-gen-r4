#checkId($entity)
package ${target.javaPackageFromFolder($SRC)};

import lombok.*;

import javax.persistence.*;

@Getter
@Setter
@MappedSuperclass
public abstract class ${entity.name}Gen {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
#set($entityIdStr = "id${entity.name}")
#if(${entity.keyAttributesCount} == 1)
#set($entityIdStr = ${entity.keyAttribute.name})
    @Column(name = "${entity.keyAttribute.databaseName}")
    private ${entity.keyAttribute.simpleType} $entityIdStr;
#else
    @Column(name = "ID_$fn.toUpperCase(${entity.name})")
    private Long ${entityIdStr};
    #foreach($field in ${entity.keyAttributes})

    @Column(name = "${field.databaseName}")
    private ${field.simpleType} ${field.name};
    #end
#end
#foreach( $field in $entity.nonKeyAttributes )
    #if($field.isFK() && ${field.referencedEntity.keyAttributesCount} == 1)

    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.PERSIST})
    @JoinColumn(name = "${field.databaseName}", referencedColumnName = "${field.referencedEntity.keyAttribute.databaseName}")
    private ${ROOT_PKG}.${fn.toLowerCase("${field.referencedEntity.name}")}.${field.referencedEntity.name} ${fn.uncapitalize(${field.referencedEntity.name})};
    #else

    @Column(name = "${field.databaseName}")
    private $field.simpleType $field.name;
    #end
#end
#foreach($link in $entity.links)
    #if($link.isCardinalityOneToMany())

    @${link.cardinality}(mappedBy = "${fn.uncapitalize(${entity.name})}",
            targetEntity = ${ROOT_PKG}.${fn.toLowerCase(${link.targetEntity.name})}.${link.targetEntitySimpleType}.class,
            fetch = FetchType.LAZY, cascade = {CascadeType.MERGE, CascadeType.PERSIST})
    private java.util.List<${ROOT_PKG}.${fn.toLowerCase(${link.targetEntity.name})}.${link.targetEntitySimpleType}> ${fn.uncapitalize(${link.targetEntity.name})}List;
    #end
#end
#foreach( $field in $entity.nonKeyAttributes )
    #if($field.isFK() && ${field.referencedEntity.keyAttributesCount} == 1)
        #if($entityIdStr != ${field.referencedEntity.keyAttribute.name})

    public ${field.referencedEntity.keyAttribute.type} get${fn.capitalize(${field.referencedEntity.keyAttribute.name})}() {
        if (this.${fn.uncapitalize(${field.referencedEntity.name})} != null) {
            return this.${fn.uncapitalize(${field.referencedEntity.name})}.get${fn.capitalize(${field.referencedEntity.keyAttribute.name})}();
        }
        return null;
    }
        #end
    #end
#end

}